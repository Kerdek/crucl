{ cat, cons, length, slice, empty, head, tail, uncons, reverse, map, for_each, join, split, foldr, foldl, unfoldr } where (

arith = #"arith.cru",
logic = #"logic.cru",

if = logic.if,
eq = arith.eq,
add = arith.add,
sub = arith.sub,

cat a b = [...a, ...b],
cons a b = [a, ...b],
length = __builtin_length,
slice = __builtin_slice,
head l = l.[0],
tail l = slice l 1 (length l),
init l = slice l 0 (sub (length l) 1),
last l = l.[sub (length l) 1],
empty l = eq (length l) 0,

uncons s a b = if (empty s) b (a (head s) (tail s)),

foldr g b s =
  let
    N = length s,
    f n =
      if (eq n N) b $
      g s.[n] (f (add n 1)) in
  f 0,

foldl g b s =
  let
    N = length s,
    f n =
      if (eq n -1) b $
      g s.[n] (f (sub n 1)) in
  f (sub N 1),

reverse = foldl cons [],

map f = foldr (\a b -> [f a, ...b]) [],

for_each v f = foldr (\a b -> do (f a) $ b) (return undefined) v,

unfoldr f =
  let g l b =
    let e = f b in
    if (eq e undefined) l $
    g [...l, e.[0]] e.[1] in
  g [],

join c l =
  if (empty l) "" $
  add (head l) $ foldr nonempty "" (tail l)
  where (
    nonempty a b = add c $ add a b),

split d s = uncons s (nonempty new) new
  where (
    new = init [],
    init a = ["", ...a],
    nonempty p a b = uncons b (nonempty pp) (reverse pp)
      where (
        pp = if (eq a d) (init p) [add (head p) a, ...tail p],
        merge x y = [add x a, ...y])))
