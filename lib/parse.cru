{ err, fail, ret, take, either, eof, char, skip, expect, anychar, seqchar, one_or_more, zero_or_more } where (

string = #"string.cru",
sfold = #"sfold.cru",
logic = #"logic.cru",
arith = #"arith.cru",

err    m    s y n f = f m s,
fail        s y n f = n,
ret    r    s y n f = y r s,
take   a b  s y n f = a s (\r t -> b r t y n f) n f,
either a b  s y n f = a s y (b s y n f) f,
eof         s y n f = logic.if (string.empty s) (y "" s) n,
char  x     s y n f = sfold.list s (\a b -> logic.if (arith.eq a x) (y a b) n) n,

skip a b = take a \_ -> b,

expect e m = either e (err m),

anychar = sfold.r (\a b -> either (char a) b) fail,
seqchar x = sfold.r (\a b -> skip (char a) b) (ret x) x,

one_or_more x = rec
  where (
    rec =
      take x \c ->
      either (
        take rec \r ->
        ret (arith.add c r)) $
      ret c),

zero_or_more x = rec
  where (
    rec =
      either (
        take x \c ->
        take rec \r ->
        ret (arith.add c r)) $
      ret ""))