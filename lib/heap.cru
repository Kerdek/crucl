{ new, empty, pop, push, unheapify, heapify, sort } where (

pre = #"pre.cru",
arith = #"arith.cru",
logic = #"logic.cru",

id = pre.id,
car = pre.car,
add = arith.add,
sub = arith.sub,
ge = arith.ge,
lt = arith.lt,
eq = arith.eq,
and = logic.and,
if = logic.if,

new cond = { cond, head: undefined },

empty h = eq h.head undefined,

pop h =
  let
    f e =
      let
        new_node =
          if (and (eq undefined e.lhs) (eq undefined e.rhs)) undefined $
          if (eq undefined e.lhs) e.rhs $
          if (eq undefined e.rhs) e.lhs $
          let f a b c = let r = f e.[a] in { value: r.[0], size: sub e.size 1, lhs: b r.[1], rhs: c r.[1] } in
          if (h.cond e.lhs.value e.rhs.value)
            (f "rhs" (car e.lhs) id)
            (f "lhs" id (car e.rhs)) in
      [e.value, new_node],
    result = f h.head in
  [result.[0], { cond: h.cond, head: result.[1] }],

push x h =
  let
    f x e =
      if (eq e undefined) { value: x, size: 1, lhs: undefined, rhs: undefined } $
      let
        select = if (h.cond e.value x),
        push_left =
          select
            { value: x, size: add e.size 1, lhs: f e.value e.lhs, rhs: e.rhs }
            { value: e.value, size: add e.size 1, lhs: f x e.lhs, rhs: e.rhs },
        push_right =
          select
            { value: x, size: add e.size 1, lhs: e.lhs, rhs: f e.value e.rhs }
            { value: e.value, size: add e.size 1, lhs: e.lhs, rhs: f x e.rhs } in
      if (eq undefined e.lhs) push_left $
      if (eq undefined e.rhs) push_right $
      if (lt e.lhs.size e.rhs.size) push_left $
      push_right in
  { cond: h.cond, head: f x h.head },

heapify fold cond = fold push (new cond),

unheapify unfold = unfold (\h -> if (empty h) undefined $ pop h),

sort fold unfold cond l = unheapify unfold (heapify fold cond l)

)