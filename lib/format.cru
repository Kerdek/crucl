format where (

typeof = #"typeof.cru",
stringify = #"stringify.cru",
logic = #"logic.cru",
arith = #"arith.cru",
keys = #"keys.cru",
tuple = #"tuple.cru",
tfold = #"tfold.cru",

add = arith.add,
eq = arith.eq,
if = logic.if,
or = logic.or,

format x =
  let is = eq (typeof x) in
  if (or (is "boolean") $ or (is "number") $ is "string") (stringify x) $
  if (is "function") "<function>" $
  if (is "null") "null" $
  if (is "undefined") "undefined" $
  if (is "tuple") (add "[" $ add (join ", " (tuple.map format x)) $ "]") $
  add "{ " $ add (join ", " (tuple.map (\key -> add key $ add ": " $ format x.[key]) (keys x))) $ " }"

)